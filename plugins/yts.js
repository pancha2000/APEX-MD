const { cmd } = require("../command");
const yts = require("yt-search");
const axios = require("axios");

// RapidAPI Configuration - ‡∂î‡∂∂‡∂ú‡∑ö API ‡∂∫‡∂≠‡∑î‡∂ª ‡∑É‡∑Ñ ‡∑É‡∂≠‡∑ä‡∂ö‡∑è‡∂ª‡∂ö ‡∂±‡∑è‡∂∏‡∂∫ ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂Ø‡∂∏‡∂±‡∑ä‡∂±.
// ‡∑Ñ‡∑ú‡∂≥‡∂∏ ‡∂Ø‡∑ö ‡∂∏‡∑ö‡∑Ä‡∑è ‡∂¥‡∂ª‡∑í‡∑É‡∂ª ‡∑Ä‡∑í‡∂†‡∂Ω‡∑ä‚Äç‡∂∫ (environment variables) ‡∂Ω‡∑ô‡∑É ‡∂≠‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂∫‡∑í.
const RAPIDAPI_KEY = '96f0e6f138msh25b1ac478ce0873p199476jsn60280b14695f';
const RAPIDAPI_HOST = 'youtube-mp3-audio-video-downloader.p.rapidapi.com';

cmd(
  {
    pattern: "song", // Command trigger
    react: "üé∂",
    desc: "Download YouTube Song/Audio",
    category: "download",
    filename: __filename,
  },
  async (
    conn,
    mek,
    m,
    { from, quoted, body, isCmd, command, args, q, isGroup, sender, reply }
  ) => {
    try {
      if (!q) return reply("*üé∂ Provide a song name or a YouTube link.*");

      const search = await yts(q);
      const data = search.videos[0]; // ‡∂¥‡∑Ö‡∂∏‡∑î ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ì

      if (!data) return reply("‚ùå No song found for your query.");

      // yts ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫‡∑ô‡∂±‡∑ä ‡∂ö‡∑ô‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ videoId ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±.
      const videoId = data.videoId; 
      if (!videoId) {
        return reply("‚ùå YouTube search result ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä video ID ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.");
      }

      // ‡∂ú‡∑ì‡∂≠ ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫
      let desc = `üé∂ *APEX-MD SONG DOWNLOADER* üé∂

üëª *Title* : ${data.title}
üëª *Duration* : ${data.timestamp}
üëª *Views* : ${data.views}
üëª *Uploaded* : ${data.ago}
üëª *Channel* : ${data.author.name}
üëª *Link* : ${data.url}

MADE BY SHEHAN VIMUKYHI`;

      await conn.sendMessage(
        from,
        { image: { url: data.thumbnail }, caption: desc },
        { quoted: mek }
      );

      // --- ‡∂±‡∑Ä downloadAudio FUNCTION (RapidAPI ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä) ---
      const downloadAudio = async (ytVideoId, quality = 'low') => {
        const options = {
          method: 'GET',
          url: `https://${RAPIDAPI_HOST}/download-mp3/${ytVideoId}`,
          params: { quality: quality }, // 'low' ‡∑Ñ‡∑ù 'high' ‡∂Ω‡∑ô‡∑É ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö
          headers: {
            'x-rapidapi-key': RAPIDAPI_KEY,
            'x-rapidapi-host': RAPIDAPI_HOST
          }
        };

        try {
          const response = await axios.request(options);
          const apiData = response.data; // RapidAPI ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± ‡∂Ø‡∂≠‡∑ä‡∂≠

          // API response ‡∂ë‡∂ö‡∑ö 'url' (download link) ‡∑É‡∑Ñ 'title' ‡∂≠‡∑í‡∂∂‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
          if (apiData && apiData.url && apiData.title) {
            const audioUrl = apiData.url;
            const audioTitle = apiData.title;

            // ‡∑É‡∑ê‡∂∂‡∑ë audio file ‡∂ë‡∂ö download ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            const audioBufferResponse = await axios.get(audioUrl, {
              responseType: "arraybuffer", // binary ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂∏‡∑ô‡∂∫ ‡∂Ö‡∂≠‡∑ä‚Äç‡∂∫‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂∫‡∑í
            });

            return { buffer: audioBufferResponse.data, title: audioTitle };
          } else {
            // ‡∂Ö‡∂¥‡∑ö‡∂ö‡∑ä‡∑Ç‡∑è ‡∂±‡∑ú‡∂ö‡∑Ö API ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª ‡∑Ä‡∑ä‚Äç‡∂∫‡∑î‡∑Ñ‡∂∫
            console.error("RapidAPI response structure unexpected:", apiData);
            throw new Error("RapidAPI ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä download link ‡∑Ñ‡∑ù title ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. Response: " + JSON.stringify(apiData));
          }
        } catch (error) {
          console.error("RapidAPI audio download ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:", error.message);
          if (error.response) {
            console.error("RapidAPI Response Error Data:", error.response.data);
            console.error("RapidAPI Response Error Status:", error.response.status);
          }
          throw new Error("RapidAPI ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª audio download ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∂¥‡∑ú‡∑Ñ‡∑ú‡∑É‡∂≠‡∑ä ‡∑Ä‡∑í‡∂∫. API ‡∂∫‡∂≠‡∑î‡∂ª ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, ‡∂±‡∑ê‡∂≠‡∑Ñ‡∑ú‡∂≠‡∑ä ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }
      };
      // --- ‡∂±‡∑Ä downloadAudio FUNCTION ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ---

      reply("*‚è≥ ‡∂î‡∂∂‡∑ö ‡∂ú‡∑ì‡∂≠‡∂∫ download ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì... ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±!*");

      // ‡∂±‡∑Ä downloadAudio function ‡∂ë‡∂ö‡∂ß videoId ‡∂ë‡∂ö ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±
      const audio = await downloadAudio(videoId);

      const cleanTitle = audio.title.replace(/[\\/:*?"<>|]/g, "");

      await conn.sendMessage(
        from,
        {
          audio: audio.buffer,
          mimetype: "audio/mpeg",
          fileName: `${cleanTitle}.mp3`,
          ptt: false // ‡∂∏‡∑ô‡∂∫ true ‡∂±‡∂∏‡∑ä voice note ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑Ä‡∂∫‡∑í, false ‡∂±‡∂∏‡∑ä mp3 file ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑Ä‡∂∫‡∑í
        },
        { quoted: mek }
      );

      await reply(`üé∂ *${audio.title}*\n\nMADE BY APEX-MD`);

    } catch (error) {
      console.error(error);
      // ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∑Ñ‡∑í‡∂≠‡∂ö‡∑è‡∂∏‡∑ì ‡∂Ø‡∑ù‡∑Ç ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±
      if (error.message.includes("RapidAPI")) {
        reply("‚ùå Download ‡∑É‡∑ö‡∑Ä‡∑è‡∑Ä (RapidAPI) ‡∑É‡∂∏‡∂ü ‡∂ú‡∑ê‡∂ß‡∂Ω‡∑î‡∑Ä‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫. " + error.message);
      } else {
        reply("‚ùå ‡∂ú‡∑ì‡∂≠‡∂∫ download ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
      }
    }
  }
);