const { cmd } = require("../command");
const yts = require("yt-search");
const axios = require("axios");

// ‡∂î‡∂∂‡∑ö Replit API Base URL ‡∂ë‡∂ö ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∑É‡∂≥‡∑Ñ‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
// ‡∂î‡∂∂‡∂ú‡∑ö API ‡∂ë‡∂ö‡∑ö URL ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∑Ä‡∑î‡∑Ä‡∑Ñ‡∑ú‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∫ update ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
const MY_API_BASE_URL = "https://9e21112f-34b1-4091-9d80-f13e50bb380a-00-3a4vah9275xj5.sisko.replit.dev";

cmd(
  {
    pattern: "song", // Command trigger
    react: "üé∂",
    desc: "Download YouTube Song/Audio",
    category: "download",
    filename: __filename,
  },
  async (
    conn,
    mek,
    m,
    { from, quoted, body, isCmd, command, args, q, isGroup, sender, reply }
  ) => {
    try {
      if (!q) return reply("*üé∂ Provide a song name or a YouTube link.*");

      reply("‚è≥ *Searching for your song...*"); // Search status message

      const search = await yts(q);
      const data = search.videos[0]; // ‡∂¥‡∑Ö‡∂∏‡∑î ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫

      if (!data) return reply("‚ùå No song found for your query.");

      const youtubeUrl = data.url; // YouTube ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä‡∑ö URL ‡∂ë‡∂ö

      // Song info message
      let desc = `üé∂ *APEX-MD SONG DOWNLOADER* üé∂

üëª *Title* : ${data.title}
üëª *Duration* : ${data.timestamp}
üëª *Views* : ${data.views}
üëª *Uploaded* : ${data.ago}
üëª *Channel* : ${data.author.name}
üëª *Link* : ${data.url}

MADE BY SHEHAN VIMUKYHI`;

      await conn.sendMessage(
        from,
        { image: { url: data.thumbnail }, caption: desc },
        { quoted: mek }
      );

      // ‡∂î‡∂∂‡∑ö‡∂∏ API ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä Audio URL ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ô‡∂± ‡∂ë‡∂∫ Download ‡∂ö‡∂ª‡∂± function ‡∂ë‡∂ö
      const getAndDownloadAudio = async (url, title) => {
        const apiUrl = `${MY_API_BASE_URL}/audio?url=${encodeURIComponent(url)}`;

        try {
          const response = await axios.get(apiUrl);

          if (response.data && response.data.audio_url) {
            const directAudioUrl = response.data.audio_url;

            // Direct Audio URL ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä Audio Buffer ‡∂ë‡∂ö Download ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            const audioBufferResponse = await axios.get(directAudioUrl, {
              responseType: "arraybuffer", // Buffer ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß
            });

            // Buffer ‡∂ë‡∂ö ‡∑É‡∑Ñ Title ‡∂ë‡∂ö ‡∂Ü‡∂¥‡∑É‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±
            return { buffer: audioBufferResponse.data, title };
          } else {
            // ‡∂î‡∂∂‡∑ö API ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä error ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ü‡∑Ä‡∑ú‡∂≠‡∑ä ‡∂ë‡∂∫ handle ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            throw new Error(response.data.error || "Failed to retrieve direct audio URL from your API. Check API logs for details.");
          }
        } catch (apiError) {
          // Axios request ‡∂ë‡∂ö‡∑ö ‡∑Ñ‡∑ù API response ‡∂ë‡∂ö‡∑ö ‡∂ú‡∑ê‡∂ß‡∂Ω‡∑î‡∑Ä‡∂ö‡∑ä
          console.error("Error calling your API or downloading audio from direct URL:", apiError.message);
          if (apiError.response && apiError.response.data && apiError.response.data.details) {
              throw new Error(`API Error: ${apiError.response.data.error || "Unknown"}. Details: ${apiError.response.data.details}`);
          }
          throw apiError; // ‡∂±‡∑ê‡∑Ä‡∂≠‡∂≠‡∑ä error ‡∂ë‡∂ö throw ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
        }
      };

      reply("*‚è≥ Downloading your song... Please wait!*");

      // ‡∂î‡∂∂‡∑ö API ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä audio URL ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ô‡∂± download ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
      // data.title ‡∂∫‡∂±‡∑î yts (yt-search) ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂± title ‡∂ë‡∂ö‡∂∫‡∑í.
      const audio = await getAndDownloadAudio(youtubeUrl, data.title);

      const cleanTitle = audio.title.replace(/[\\/:*?"<>|]/g, "");

      await conn.sendMessage(
        from,
        {
          audio: audio.buffer,
          mimetype: "audio/mpeg", // MP3 ‡∑É‡∂≥‡∑Ñ‡∑è mimetype
          fileName: `${cleanTitle}.mp3`,
        },
        { quoted: mek }
      );

      await reply(`üé∂ *${audio.title}*\n\nMADE BY APEX-MD`);

    } catch (error) {
      console.error("Error in song command:", error);
      reply(`‚ùå Error downloading song. Please try again later. Details: ${error.message}`);
    }
  }
);