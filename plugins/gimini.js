// commands/ai.js

// const { readEnv } = require('../lib/database'); // ‡∂∏‡∑ö ‡∂Ω‡∂∫‡∑í‡∂±‡∑ä ‡∂ë‡∂ö ‡∂Ö‡∂∫‡∑í‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∑Ñ‡∑ù comment ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
const { cmd } = require('../command');
const { GoogleGenerativeAI } = require('@google/generative-ai');

let genAIInstance;

cmd({
    pattern: "ai",
    react: "‚ú®",
    desc: "Ask questions to Gemini AI.",
    category: "ai",
    filename: __filename
},
async (conn, mek, m, { from, q, reply, isOwner }) => {
    try {
        if (!q) {
            return reply("ü§ñ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂ú‡∑ô‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ö‡∑Ñ‡∂±‡∑ä‡∂±.\n‡∂ã‡∂Ø‡∑è: `.ai ‡∂Ω‡∂Ç‡∂ö‡∑è‡∑Ä‡∑ö ‡∂Ö‡∂ú‡∂±‡∑î‡∑Ä‡∂ª ‡∂ö‡∑î‡∂∏‡∂ö‡∑ä‡∂Ø?`");
        }

        // config.js ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä GEMINI_API_KEY ‡∂ë‡∂ö ‡∂ö‡∑ô‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ ‡∂ú‡∂±‡∑ä‡∂±
        const GEMINI_API_KEY = global.GEMINI_API_KEY;

        if (!GEMINI_API_KEY || GEMINI_API_KEY === "YOUR_GEMINI_API_KEY" || GEMINI_API_KEY === "YOUR_API_KEY_FROM_CONFIG_JS") { // config.js ‡∂ë‡∂ö‡∑ö default value ‡∂ë‡∂ö‡∂≠‡∑ä ‡∂†‡∑ô‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            console.error("Gemini API Key is not configured correctly in config.js or as a global variable.");
            // ‡∂î‡∂∫‡∑è config.js ‡∂ë‡∂ö‡∑ö API key ‡∂ë‡∂ö ‡∂Ø‡∑è‡∂± ‡∂≠‡∑ê‡∂± default value ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂¥‡∑è‡∑Ä‡∑í‡∂†‡∑ä‡∂†‡∑í ‡∂ö‡∂ª‡∂±‡∑Ä‡∂±‡∂∏‡∑ä, ‡∂í‡∂ö‡∂≠‡∑ä ‡∂∏‡∑ô‡∂≠‡∂±‡∂ß ‡∂Ø‡∑è‡∂±‡∑ä‡∂±
            // ‡∂ã‡∂Ø‡∑è: GEMINI_API_KEY === "YOUR_GEMINI_API_KEY" (‡∂î‡∂∫‡∑è‡∂ú‡∑ô config.js ‡∂ë‡∂ö‡∑ö default ‡∂ë‡∂ö ‡∂Ö‡∂±‡∑î‡∑Ä)
            return reply("üö´ Gemini API Key ‡∂ë‡∂ö config.js ‡∑Ü‡∂∫‡∑í‡∂Ω‡∑ä ‡∂ë‡∂ö‡∑ö ‡∑É‡∂ö‡∑É‡∑è ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        if (!genAIInstance) {
            genAIInstance = new GoogleGenerativeAI(GEMINI_API_KEY);
        }
        
        const model = genAIInstance.getGenerativeModel({ model: "gemini-pro" });
        const thinkingMessage = await conn.sendMessage(from, { text: "ü§î AI ‡∂ë‡∂ö ‡∑Ñ‡∑í‡∂≠‡∂± ‡∂ú‡∂∏‡∂±‡∑ä ‡∂â‡∂±‡∑ä‡∂±‡∑ö... ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂Ø‡∂ö‡∑ä ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±." }, { quoted: mek });
        const result = await model.generateContent(q);
        const response = await result.response;
        const text = response.text();
        return await conn.sendMessage(from, { text: text }, { quoted: mek });

    } catch (e) {
        console.error("Gemini AI Error:", e);
        let errorMessage = "üò• ‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, Gemini AI ‡∑Ä‡∑ô‡∂≠ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫.";
        if (e.message) {
            if (e.message.includes('API key not valid') || e.message.includes('permissionDenied')) {
                errorMessage = "üö´ API Key ‡∂ë‡∂ö ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í ‡∑Ñ‡∑ù ‡∂Ö‡∑Ä‡∑É‡∂ª ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
            } else if (e.message.includes('quota') || e.message.includes('rate limit')) {
                errorMessage = "‚åõ API ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä ‡∂â‡∂ö‡∑ä‡∂∏‡∑Ä‡∑è ‡∂á‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
            } else if (e.response && e.response.candidates && e.response.candidates[0].finishReason === 'SAFETY') {
                errorMessage = "‚ùå ‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂¥‡∂≠‡∑ä‡∂≠‡∑í ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä‡∑ô‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂ö‡∑ä‡∑Ç‡∑ö‡∂¥ ‡∑Ä‡∑í‡∂∫."
            }
        }
        if (isOwner) {
            await reply(`Owner Debug: ${e.toString()}`);
        }
        return reply(errorMessage);
    }
});