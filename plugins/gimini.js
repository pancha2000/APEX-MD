// commands/ai.js

const { readEnv } = require('../lib/database'); // Correct path to your readEnv
const { cmd } = require('../command');         // Correct path to your cmd
const { GoogleGenerativeAI } = require('@google/generative-ai');

let genAIInstance; // To store the initialized GenAI instance

cmd({
    pattern: "ai", // Command to trigger: .ai <your question>
    react: "‚ú®",
    desc: "Ask questions to Gemini AI.",
    category: "ai", // You can create a new category or use an existing one
    filename: __filename
},
async (conn, mek, m, { from, q, reply, isOwner }) => { // Added isOwner for potential owner-only error details
    try {
        if (!q) {
            return reply("ü§ñ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂ú‡∑ô‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ö‡∑Ñ‡∂±‡∑ä‡∂±.\n‡∂ã‡∂Ø‡∑è: `.ai ‡∂Ω‡∂Ç‡∂ö‡∑è‡∑Ä‡∑ö ‡∂Ö‡∂ú‡∂±‡∑î‡∑Ä‡∂ª ‡∂ö‡∑î‡∂∏‡∂ö‡∑ä‡∂Ø?`");
        }

        const config = await readEnv(); // Load environment variables
        const GEMINI_API_KEY = config.GEMINI_API_KEY; // Get API key from .env via readEnv

        if (!GEMINI_API_KEY) {
            console.error("Gemini API Key is not configured in .env file.");
            return reply("üö´ Gemini API Key ‡∂ë‡∂ö ‡∑É‡∂ö‡∑É‡∑è ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        // Initialize genAI if not already done
        if (!genAIInstance) {
            genAIInstance = new GoogleGenerativeAI(GEMINI_API_KEY);
        }
        
        const model = genAIInstance.getGenerativeModel({ model: "gemini-pro" });

        // Send a thinking message
        const thinkingMessage = await conn.sendMessage(from, { text: "ü§î AI ‡∂ë‡∂ö ‡∑Ñ‡∑í‡∂≠‡∂± ‡∂ú‡∂∏‡∂±‡∑ä ‡∂â‡∂±‡∑ä‡∂±‡∑ö... ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂Ø‡∂ö‡∑ä ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±." }, { quoted: mek });

        const result = await model.generateContent(q); // 'q' is the user's question
        const response = await result.response;
        const text = response.text();

        // Edit the thinking message with the actual response
        // Or send a new reply, editing might be cleaner if supported well by your conn.sendMessage
        return await conn.sendMessage(from, { text: text }, { quoted: mek });
        // If you want to edit the "thinking" message:
        // return await conn.relayMessage(from, {
        //     protocolMessage: {
        //         key: thinkingMessage.key,
        //         type: 14, // EPHEMERAL_SETTING
        //         editedMessage: {
        //             conversation: text
        //         }
        //     },
        //     messageTimestamp: thinkingMessage.messageTimestamp
        // }, { quoted: mek });
        // Note: Editing messages can be complex; sending a new reply is simpler.

    } catch (e) {
        console.error("Gemini AI Error:", e);
        let errorMessage = "üò• ‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, Gemini AI ‡∑Ä‡∑ô‡∂≠ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫.";
        if (e.message) {
            if (e.message.includes('API key not valid') || e.message.includes('permissionDenied')) {
                errorMessage = "üö´ API Key ‡∂ë‡∂ö ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í ‡∑Ñ‡∑ù ‡∂Ö‡∑Ä‡∑É‡∂ª ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
            } else if (e.message.includes('quota') || e.message.includes('rate limit')) {
                errorMessage = "‚åõ API ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä ‡∂â‡∂ö‡∑ä‡∂∏‡∑Ä‡∑è ‡∂á‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
            } else if (e.response && e.response.candidates && e.response.candidates[0].finishReason === 'SAFETY') {
                errorMessage = "‚ùå ‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂¥‡∂≠‡∑ä‡∂≠‡∑í ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä‡∑ô‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂ö‡∑ä‡∑Ç‡∑ö‡∂¥ ‡∑Ä‡∑í‡∂∫."
            }
        }
        
        // If you want to send detailed error to owner only
        if (isOwner) {
            await reply(`Owner Debug: ${e.toString()}`);
        }
        return reply(errorMessage);
    }
});