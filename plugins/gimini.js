const { readEnv } = require('../lib/database'); // ‡∂î‡∂∫‡∑è‡∂ú‡∑ö readEnv function ‡∂ë‡∂ö‡∂ß path ‡∂ë‡∂ö
const { cmd } = require('../command'); // ‡∂î‡∂∫‡∑è‡∂ú‡∑ö cmd function ‡∂ë‡∂ö‡∂ß path ‡∂ë‡∂ö
const { GoogleGenerativeAI } = require('@google/generative-ai');

let genAIInstance; // Store the genAI instance globally or re-initialize per call

cmd({
    pattern: "gemini", // ‡∑Ñ‡∑ù ‡∂î‡∂∫‡∑è‡∂ß ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í pattern ‡∂ë‡∂ö‡∂ö‡∑ä: "ai", "ask"
    react: "‚ú®",
    desc: "Ask questions to Gemini AI.",
    category: "ai",
    filename: __filename
},
async (conn, mek, m, { from, q, reply }) => {
    try {
        if (!q) {
            return reply("ü§ñ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂ú‡∑ô‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ö‡∑Ñ‡∂±‡∑ä‡∂±.\n‡∂ã‡∂Ø‡∑è: `.gemini ‡∂Ω‡∂Ç‡∂ö‡∑è‡∑Ä‡∑ö ‡∂Ö‡∂ú‡∂±‡∑î‡∑Ä‡∂ª ‡∂ö‡∑î‡∂∏‡∂ö‡∑ä‡∂Ø?`");
        }

        const config = await readEnv();
        const GEMINI_API_KEY = config.GEMINI_API_KEY; // .env ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä GEMINI_API_KEY ‡∂ë‡∂ö ‡∂ú‡∂±‡∑ä‡∂±

        if (!GEMINI_API_KEY) {
            return reply("üö´ Gemini API Key ‡∂ë‡∂ö ‡∑É‡∂ö‡∑É‡∑è ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        // Initialize genAI if not already done or if you prefer per-call initialization
        if (!genAIInstance) {
            genAIInstance = new GoogleGenerativeAI(GEMINI_API_KEY);
        }
        // For text-only input, use the gemini-pro model
        const model = genAIInstance.getGenerativeModel({ model: "gemini-pro" });

        await reply("ü§î ‡∂∏‡∂∏ ‡∑Ñ‡∑í‡∂≠‡∂± ‡∂ú‡∂∏‡∂±‡∑ä ‡∂â‡∂±‡∑ä‡∂±‡∑ö... ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±."); // Loading message

        const result = await model.generateContent(q); // q ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±‡∑ö user ‡∂ú‡∑Ñ‡∂¥‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫
        const response = await result.response;
        const text = response.text();

        return await reply(text);

    } catch (e) {
        console.error("Gemini AI Error:", e);
        let errorMessage = "üò• ‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, ‡∂∫‡∂∏‡∑ä ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫.";
        if (e.message) {
            // Check for specific Gemini API errors if needed
            if (e.message.includes('API key not valid')) {
                errorMessage = "üö´ API Key ‡∂ë‡∂ö ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
            } else if (e.message.includes('quota') || e.message.includes('rate limit')) {
                errorMessage = "‚åõ API ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä ‡∂â‡∂ö‡∑ä‡∂∏‡∑Ä‡∑è ‡∂á‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
            }
        }
        // For debugging, you might want to send the actual error to the owner
        // if (isOwner) reply(`Error for owner: ${e.toString()}`);
        return reply(errorMessage);
    }
});