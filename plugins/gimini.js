// plugins/gimini.js
const { cmd } = require('../command');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const config = require('../config'); // Import config

let genAIInstance;
const GEMINI_API_KEY = config.GEMINI_API_KEY; // Get from config

cmd({
    pattern: "ai",
    // ... (rest of the command definition)
},
async (conn, mek, m, { q, reply, isOwner }) => {
    try {
        if (!q) {
            return reply("ü§ñ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂ú‡∑ô‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∂Ö‡∑Ñ‡∂±‡∑ä‡∂±.\n‡∂ã‡∂Ø‡∑è: `.ai ‡∂Ω‡∂Ç‡∂ö‡∑è‡∑Ä‡∑ö ‡∂Ö‡∂ú‡∂±‡∑î‡∑Ä‡∂ª ‡∂ö‡∑î‡∂∏‡∂ö‡∑ä‡∂Ø?`");
        }

        if (!GEMINI_API_KEY) { // Check if key exists in config
            console.error("Gemini API Key is missing in config.js or .env file!");
            return reply("üö´ Gemini API Key ‡∂ë‡∂ö ‡∑É‡∂ö‡∑É‡∑è ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
        }

        if (!genAIInstance) {
            try {
                genAIInstance = new GoogleGenerativeAI(GEMINI_API_KEY);
            } catch (initError) {
                // ... (your existing good error handling for initError)
                 console.error("Error initializing GoogleGenerativeAI:", initError);
                if (initError.message && (initError.message.includes('API key not valid') || initError.message.includes('permission denied'))) {
                     return reply("üö´ API Key ‡∂ë‡∂ö ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í ‡∑Ñ‡∑ù ‡∂Ö‡∑Ä‡∑É‡∂ª ‡∂±‡∑ê‡∂≠ (‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑í). ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
                }
                return reply("üò• ‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, Gemini AI ‡∑É‡∑ö‡∑Ä‡∑è‡∑Ä ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫.");
            }
        }
        
        const model = genAIInstance.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
        await reply("ü§î AI ‡∂ë‡∂ö ‡∑Ñ‡∑í‡∂≠‡∂± ‡∂ú‡∂∏‡∂±‡∑ä ‡∂â‡∂±‡∑ä‡∂±‡∑ö... ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂Ø‡∂ö‡∑ä ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±.");
        const result = await model.generateContent(q);
        const response = await result.response;
        const text = response.text();
        return await reply(text);

    } catch (e) {
        // ... (your existing good error handling for execution error)
        console.error("Gemini AI Error in command execution:", e);
        let errorMessage = "üò• ‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, Gemini AI ‡∑Ä‡∑ô‡∂≠ ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫.";
        
        if (e.message) {
            if (e.message.includes('API key not valid') || e.message.includes('permission denied')) {
                errorMessage = "üö´ API Key ‡∂ë‡∂ö ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í ‡∑Ñ‡∑ù ‡∂Ö‡∑Ä‡∑É‡∂ª ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª bot ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
            } else if (e.message.includes('quota') || e.message.includes('rate limit')) {
                errorMessage = "‚åõ API ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä ‡∂â‡∂ö‡∑ä‡∂∏‡∑Ä‡∑è ‡∂á‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
            } else if (e.response && e.response.candidates && e.response.candidates[0] && e.response.candidates[0].finishReason === 'SAFETY') {
                errorMessage = "‚ùå ‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂¥‡∂≠‡∑ä‡∂≠‡∑í ‡∑Ñ‡∑ö‡∂≠‡∑î‡∑Ä‡∑ô‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂ö‡∑ä‡∑Ç‡∑ö‡∂¥ ‡∑Ä‡∑í‡∂∫.";
            } else if (e.message.includes("User location is not supported")) {
                errorMessage = "üìç ‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ö‡∂Ω‡∑è‡∂¥‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂∏‡∑ô‡∂∏ ‡∑É‡∑ö‡∑Ä‡∑è‡∑Ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö (User location not supported).";
            }
        }
        
        if (isOwner && e.message) { // Send only message to owner for brevity, stack is in console
            await reply(`*Owner Debug Info for AI cmd:*\nError: ${e.message}`);
        }
        return reply(errorMessage);
    }
});